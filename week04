{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Homework 4\n",
    "\n",
    "- Execute the below code, then answer the numbered questions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 9055 entries, 0 to 9054\n",
      "Data columns (total 7 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   make           8164 non-null   object \n",
      " 1   transmission   8106 non-null   object \n",
      " 2   state          8152 non-null   object \n",
      " 3   condition      8173 non-null   float64\n",
      " 4   odometer       8178 non-null   float64\n",
      " 5   auction_value  8107 non-null   float64\n",
      " 6   selling_price  9055 non-null   float64\n",
      "dtypes: float64(4), object(3)\n",
      "memory usage: 495.3+ KB\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv('https://raw.githubusercontent.com/msaricaumbc/DS_data/master/ds602/regression/car-reg-data.csv')\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Records in training data: 7,244\n",
      "Records in test data: 1,811\n",
      "\n",
      "Features:\n",
      "make\n",
      "transmission\n",
      "state\n",
      "condition\n",
      "odometer\n",
      "auction_value\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "features = [x for x in df.columns if x != 'selling_price']\n",
    "\n",
    "X = df[features]\n",
    "y = df['selling_price']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=100)\n",
    "\n",
    "print(f'Records in training data: {X_train.shape[0]:,}')\n",
    "print(f'Records in test data: {X_test.shape[0]:,}')\n",
    "print('\\nFeatures:')\n",
    "print(*X_train.columns, sep='\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 1: Split the features into two lists, one for the numerical features and another for the categorical features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Numerical features: ['condition', 'odometer', 'auction_value']\n",
      "Categorical features: ['make', 'transmission', 'state']\n"
     ]
    }
   ],
   "source": [
    "# insert code here\n",
    "n_f = df.select_dtypes(include=['float64', 'int64']).columns.tolist()[:-1]\n",
    "c_f = df.select_dtypes(include=['object']).columns.tolist()\n",
    "print(\"Numerical features:\", n_f)\n",
    "print(\"Categorical features:\", c_f)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the above code I have created two different lists for numerical and categorial variables."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 2: Using the numerical variables, create a pipeline that replaces the missing values with the median and then standardizes the values using a standard scaler."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# insert code here\n",
    "\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# Define the pipeline\n",
    "n_pipeline = Pipeline([\n",
    "    ('imputer', SimpleImputer(strategy='median')), # Replace missing values with median\n",
    "    ('scaler', StandardScaler()) # Standardize the values using a standard scaler\n",
    "])\n",
    "# insert code here\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "# Define the pipeline\n",
    "c_pipeline = Pipeline([\n",
    "    ('imputer', SimpleImputer(strategy='most_frequent')), # Replace missing values with most frequent\n",
    "    ('encoder', OneHotEncoder(handle_unknown='ignore', drop='first')) # One-hot encoding with dropping one category\n",
    "])\n",
    "\n",
    "X_num_transformed = n_pipeline.fit_transform(df[n_f])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the above code 'simpleimputer' replaces missing values with the respective columns median value. Whereas, the standardizes the values using a standard scalar."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 3: Using the categorical variables, create a pipeline that replaces the missing values with the most frequent and then use one-hot encoding to convert the data to numerical arrays.\n",
    "- You should be dropping one category from each variable when using the one-hot encoder.  \n",
    "- To ensure the pipeline doesn't break when it receives new/unexpected categories, you should ignore new categories.\n",
    "- Use a fit transformer on the training dataset to validate all the columns are now numeric and to determine how many columns the transformed data contains."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Transformed features shape: (9055, 44)\n"
     ]
    }
   ],
   "source": [
    "# insert code here\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "# Define the pipeline\n",
    "c_pipeline = Pipeline([\n",
    "    ('imputer', SimpleImputer(strategy='most_frequent')), # Replace missing values with most frequent\n",
    "    ('encoder', OneHotEncoder(handle_unknown='ignore', drop='first')) # One-hot encoding with dropping one category\n",
    "])\n",
    "\n",
    "# Fit and transform the pipeline on the categorical features of the data\n",
    "X_cat_transformed = c_pipeline.fit_transform(df[c_f])\n",
    "import numpy as np\n",
    "\n",
    "# Concatenate the transformed numerical and categorical features\n",
    "X_transformed = np.concatenate((X_num_transformed, X_cat_transformed.toarray()), axis=1)\n",
    "\n",
    "# Print the shape of the transformed features\n",
    "print(\"Transformed features shape:\", X_transformed.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One hot encoding method in machine learning is the transfer of categorical variables into a numerical representation. According to this method, each category is represented as a binary vector with a 1 where the category belongs and 0s everywhere else.\n",
    "One of the key features of sklearn \n",
    "is its pipeline module, which allows users to define a sequence of data processing steps that are executed in a particular order.\n",
    "The sklearn pipeline provides a convenient way to encapsulate all the data preprocessing, feature engineering, and model training steps into a single object. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 4: Combine the numerical and categorical pipelines into one data processing pipeline.\n",
    "- Use a fit transformers and the training dataset to verify the data has no missing values and the correct number of columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Transformed features shape: (9055, 44)\n"
     ]
    }
   ],
   "source": [
    "# insert code here\n",
    "from sklearn.compose import ColumnTransformer\n",
    "\n",
    "# Define the column transformer\n",
    "preprocessor = ColumnTransformer(transformers=[\n",
    "    ('num', n_pipeline, n_f), # Apply numerical pipeline to numerical features\n",
    "    ('cat', c_pipeline, c_f) # Apply categorical pipeline to categorical features\n",
    "])\n",
    "\n",
    "# Fit and transform the preprocessing pipeline on the data\n",
    "X_preprocessed = preprocessor.fit_transform(df)\n",
    "print(\"Transformed features shape:\", X_preprocessed.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A scikit-learn transformer called ColumnTransformer enables various transformations to be done to various dataset columns. By using several transformers on various subsets of columns and concatenating the outputs, it enables more effective and flexible data preparation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 5: Add a linear regression model to the pipeline.\n",
    "- Report what the $R^2$ is using the `test` data.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 7244 entries, 7821 to 5640\n",
      "Data columns (total 6 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   make           6515 non-null   object \n",
      " 1   transmission   6486 non-null   object \n",
      " 2   state          6541 non-null   object \n",
      " 3   condition      6558 non-null   float64\n",
      " 4   odometer       6541 non-null   float64\n",
      " 5   auction_value  6473 non-null   float64\n",
      "dtypes: float64(3), object(3)\n",
      "memory usage: 396.2+ KB\n"
     ]
    }
   ],
   "source": [
    "X_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7821    13500.0\n",
       "4127    22000.0\n",
       "12      10100.0\n",
       "1689    13200.0\n",
       "726     12100.0\n",
       "         ...   \n",
       "350     11200.0\n",
       "79      17800.0\n",
       "8039    10900.0\n",
       "6936     9600.0\n",
       "5640    12600.0\n",
       "Name: selling_price, Length: 7244, dtype: float64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(steps=[('data_processing',\n",
       "                 ColumnTransformer(transformers=[('num',\n",
       "                                                  Pipeline(steps=[('imputer',\n",
       "                                                                   SimpleImputer(strategy='median')),\n",
       "                                                                  ('scaler',\n",
       "                                                                   StandardScaler())]),\n",
       "                                                  ['condition', 'odometer',\n",
       "                                                   'auction_value']),\n",
       "                                                 ('cat',\n",
       "                                                  Pipeline(steps=[('imputer',\n",
       "                                                                   SimpleImputer(strategy='most_frequent')),\n",
       "                                                                  ('encoder',\n",
       "                                                                   OneHotEncoder(drop='first',\n",
       "                                                                                 handle_unknown='ignore'))]),\n",
       "                                                  ['make', 'transmission',\n",
       "                                                   'state'])])),\n",
       "                ('lm', LinearRegression())])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.pipeline import Pipeline\n",
    "\n",
    "X_training, X_test, y_training, y_test = train_test_split(X, y, test_size=0.20)\n",
    "model_pipeline = Pipeline([('data_processing',preprocessor ), \n",
    "                              ('lm', LinearRegression())\n",
    "                             ])\n",
    "model_pipeline.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "selling_price_prediction = model_pipeline.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8777478328063825"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "R2 = r2_score(y_test,selling_price_prediction )\n",
    "R2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the starting cells itself we have split the data into test and training data.\n",
    "Records in training data: 7,244\n",
    "Records in test data: 1,811\n",
    "Then I have imported Linear Regression."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 6: Create a plot(s) of the residuals. Do you have any concerns about patterns in the residuals that the model is neglecting to pick-up?\n",
    "- Include a sentence or two on what you observe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# insert code here\n",
    "import matplotlib.pyplot as plt\n",
    "plt.plot(y_test,selling_price_prediction , 'ro')\n",
    "plt.xlabel('Actual')\n",
    "plt.ylabel('Predicted')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(selling_price_prediction, selling_price_prediction - y_test, 'ro')\n",
    "plt.ylabel('Residual')\n",
    "plt.xlabel('Predicted')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Insert description here."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 7: Modify the pipeline to use a ridge regression model with an alpha value of 100. How does this change the $R^2$?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  887.27571961,  -225.8804183 ,  6817.22030075, -2031.21316873,\n",
       "       -2258.08088636, -2066.51680948, -1977.60509939, -1939.85932751,\n",
       "       -2645.77654805, -2881.12980967, -2439.73347347, -1881.48899097,\n",
       "        -550.68502334,   154.6562056 ,   720.37926956,  -110.31945307,\n",
       "         -31.25653246,  -823.6350173 ,    83.03900137,  -804.38607966,\n",
       "         -31.26323912,  -920.26223804,  -849.52476602,   109.44645156,\n",
       "        -191.16092639,   441.92462668,   575.46182254,  -341.51282197,\n",
       "         257.63435318,  -274.74445571,  -546.95092706,   301.03275319,\n",
       "        -816.96419104,  -403.11076571,  -793.08276058,  -231.64918457,\n",
       "       -1843.22786016,  -629.60192849,   347.37975236,    91.2398466 ,\n",
       "        -454.03507043,  -295.42179913,  -100.24197336,   -27.36530842])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import Ridge\n",
    "\n",
    "modeling_pipeline_ridge = Pipeline([('data_processing',preprocessor ), ('ridge', Ridge(alpha=100))])\n",
    "modeling_pipeline_ridge.fit(X_training, y_training)\n",
    "modeling_pipeline_ridge['ridge'].coef_\n",
    "model_pipeline['lm'].coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Done\n"
     ]
    }
   ],
   "source": [
    "from collections import defaultdict\n",
    "alphas = [0, 10, 20, 50, 100, 150]\n",
    "\n",
    "ridge_results = defaultdict(dict)\n",
    "\n",
    "for alph in alphas:\n",
    "    modeling_pipeline_ridge = Pipeline([('data_processing',preprocessor ), ('ridge', Ridge(alpha=alph))])\n",
    "    modeling_pipeline_ridge.fit(X_training, y_training)\n",
    "    ridge_results['coefficients'][alph] = modeling_pipeline_ridge['ridge'].coef_\n",
    "    ridge_results['training score'][alph] = modeling_pipeline_ridge.score(X_training, y_training)\n",
    "    ridge_results['test score'][alph] = modeling_pipeline_ridge.score(X_test, y_test)\n",
    "\n",
    "print('Done')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "coefficients_ridge = pd.DataFrame.from_dict(ridge_results['coefficients'])\n",
    "coefficients_ridge = coefficients_ridge.reset_index()\n",
    "coefficients_ridge = coefficients_ridge.rename(columns={'index':'coefficient_nbr'})\n",
    "coefficients_ridge = coefficients_ridge.melt(id_vars='coefficient_nbr', var_name='alpha', value_name='coefficient')\n",
    "\n",
    "(\n",
    "coefficients_ridge.pivot_table(index='alpha', columns='coefficient_nbr', values='coefficient')\n",
    "    .plot(figsize=(8,4),legend=False)\n",
    ")\n",
    "\n",
    "plt.title('Ridge Coefficients', loc='left')\n",
    "plt.xlabel('Alpha (Regularization Amount)')\n",
    "plt.ylabel('Coefficient')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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3rvvvsvgwYOdBCqQxODBg7u95+REYGZrBSeBfHryPjkRmJk1OScCM7MKFi5cSGtrK62trXzwgx9k6NChncvvv/9+2W1nzpzJ5MmTK/ax77779la43eaDxWZmFQwePJjZs2cDcNlllzFgwADOP//8zvLly5ez3nrFv07b2tpoa2ur2McDDzzQK7H2hPcIzMx64NRTT+W8885j/PjxXHjhhTz00EPsu+++7Lbbbuy77748++yzAEyfPp0jjjgCSJLIaaedxrhx49huu+34zne+09negAEDOuuPGzeO4447jlGjRnHSSSfRcbuA22+/nVGjRrH//vszefLkznbXlPcIzGyt8pXb5vDUq2/1apujt9qYS48c0+3t/vznP3P33XfT0tLCW2+9xYwZM1hvvfW4++67+dKXvsRNN9202jbPPPMM9957L0uWLGGHHXbgs5/97Grn/D/66KPMmTOHrbbaiv3224/777+ftrY2zjjjDGbMmMGIESOYOLHspVrd4kRgZtZDxx9/PC0tLQAsXryYU045heeeew5JLFu2rOg2H/nIR+jXrx/9+vVj88035y9/+QvDhg3rUmfs2LGd61pbW5k3bx4DBgxgu+2267w+YOLEiUydOrVXXocTgZmtVXryy71aNtpoo87nl1xyCePHj+eWW25h3rx5jBs3rug2/fr163ze0tLC8uXLc9Wp1t0kwccIzMx6xeLFixk6dCgAV199da+3P2rUKF544QXmzZsHwA033NBrbTsRmJn1ggsuuICLLrqI/fbbjxUrVvR6+xtssAFXXnklEyZMYP/992eLLbZgk0026ZW2q3bz+mrxjWnMms/TTz/NjjvuWO8w6m7p0qUMGDCAiODMM89k5MiRnHvuuavVK/Z+SZoVEUXPY/UegZnZWuKHP/whra2tjBkzhsWLF3PGGWf0Srs+WGxmtpY499xzi+4BrCnvEZiZNTknAjOzJudEYGbW5JwIzMyanA8Wm5lVsHDhQg4++GAAXn/9dVpaWhgyZAgADz30EOuvv37Z7adPn876669f16mmy3EiMDOroNI01JVMnz6dAQMGNGwi8NCQmVkPzJo1iwMPPJA99tiDQw89lNdeew2A73znO4wePZpddtmFE044gXnz5jFlyhSuuOIKWltb+f3vf1/nyFfnPQIzW7v89ovw+hO92+YHd4bDLs9dPSI4++yz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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ridge_training_r2 = pd.Series(ridge_results['training score'])\n",
    "ridge_test_r2 = pd.Series(ridge_results['test score'])\n",
    "\n",
    "ridge_training_r2.plot()\n",
    "ridge_test_r2.plot()\n",
    "plt.title('$R^2$ for Ridge Regression')\n",
    "plt.legend(['Training','Test'])\n",
    "plt.xlabel('Alpha (Regularization Level)')\n",
    "plt.ylabel('Percent of Variance Explained')\n",
    "plt.ylim(0.4, 1)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
